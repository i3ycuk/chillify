from brain import types, text, bold, italic, code, pre, log_stream, dominate, style, body, h1, p, datetime, footer, InlineKeyboardMarkup, InlineKeyboardButton, os, logging, subprocess, sys, Dispatcher, random, choice, SendReactionRequest, ReactionEmoji, AVAILABLE_REACTIONS, client, dp

async def debug_handler(message: types.Message):
    if not message.text:  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç
        logging.debug("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    debug_info = text(
        "üõ†Ô∏è " + bold("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"),
        f"üìÑ ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}",
        f"üí¨ –¢–µ–∫—Å—Ç: {italic(message.text or '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')}",
        f"üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {message.date}",
        f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {bold(message.from_user.full_name)}",
        f"üÜî ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {message.from_user.id}",
        f"üåê –Ø–∑—ã–∫: {message.from_user.language_code}",
        f"üí¨ –¢–∏–ø —á–∞—Ç–∞: {italic(message.chat.type)}",
        f"üÜî ID —á–∞—Ç–∞: {message.chat.id}",
        "üìú " + code("–ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"),
        pre(str(message.to_python())),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
        sep="\n",
    )

    await message.reply(debug_info, parse_mode="HTML")


async def ping_handler(message: types.Message):
    selected_reaction = random.choice(AVAILABLE_REACTIONS)
    big_reaction = choice([True])  # –°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ–º big —Ä–µ–∞–∫—Ü–∏—é: random.choice([True, False])
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await client(SendReactionRequest(
            peer=message.chat.id,
            msg_id=message.message_id,
            reaction=[ReactionEmoji(selected_reaction)],
            big=big_reaction
        ))
        logging.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
        await message.reply("üèì –ü–æ–Ω–≥!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏ {selected_reaction}: {e}")


async def test_handler(message: types.Message):
    if not message.text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
        return
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {message.text}")
    await message.reply("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def generate_html_logs(filter_level: str = None) -> str:
    # –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º log_stream –≤ –Ω–∞—á–∞–ª–æ, —á—Ç–æ–±—ã —á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    log_stream.seek(0)
    logs = log_stream.getvalue()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
    if not logs.strip():
        logs = "–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã."

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–æ–≤
    if filter_level:
        filtered_logs = "\n".join(
            line for line in logs.splitlines() if f"{filter_level.upper()} -" in line
        )
        if not filtered_logs.strip():  # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
            filtered_logs = f"–õ–æ–≥–∏ —É—Ä–æ–≤–Ω—è {filter_level.upper()} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
    else:
        filtered_logs = logs

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    log_folder = "logs"
    os.makedirs(log_folder, exist_ok=True)

    # –°–æ–∑–¥–∞–Ω–∏–µ HTML-–¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é dominate
    doc = dominate.document(title="–õ–æ–≥–∏ –±–æ—Ç–∞")

    with doc.head:
        style(""" 
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
                line-height: 1.6;
                margin: 20px;
            }
            h1 {
                color: #4CAF50;
            }
            pre {
                background: #f4f4f4;
                border: 1px solid #ddd;
                padding: 10px;
                overflow-x: auto;
            }
            footer {
                margin-top: 20px;
                font-size: 0.9em;
                color: #555;
            }
        """)

    with doc:
        with body():
            h1("üìÑ –õ–æ–≥–∏ –±–æ—Ç–∞")
            p(f"–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            pre(filtered_logs)  # –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏
            footer("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–æ—Ç–æ–º.")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML-–¥–æ–∫—É–º–µ–Ω—Ç–∞
    file_path = os.path.join(log_folder, "logs.html")
    with open(file_path, "w", encoding="utf-8") as f:
        f.write(doc.render())

    return file_path

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–æ–≤
def get_logs_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚öôÔ∏è –í—Å–µ –ª–æ–≥–∏", callback_data="logs_all"),
        InlineKeyboardButton("‚ÑπÔ∏è INFO", callback_data="logs_info"),
        InlineKeyboardButton("‚ö†Ô∏è WARNING", callback_data="logs_warning"),
        InlineKeyboardButton("‚ùå ERROR", callback_data="logs_error"),
    )
    keyboard.add(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="delete_logs"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤
async def console_handler(message: types.Message):
    await message.reply(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:",
        reply_markup=get_logs_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
async def callback_handler(callback_query: types.CallbackQuery):
    action = callback_query.data

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º bot_data –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ª–æ–≥–∞–º–∏
    if not hasattr(callback_query.bot, "bot_data"):
        callback_query.bot.bot_data = {}
    if "log_message_ids" not in callback_query.bot.bot_data:
        callback_query.bot.bot_data["log_message_ids"] = []

    if action.startswith("logs_"):
        filter_level = action.split("_")[1] if action != "logs_all" else None
        file_path = await generate_html_logs(filter_level)

        sent_message = await callback_query.message.answer_document(
            open(file_path, "rb"),
            caption=f"üìÅ –õ–æ–≥–∏ —É—Ä–æ–≤–Ω—è: {filter_level.upper() if filter_level else '–í—Å–µ'}",
        )
        os.remove(file_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

        # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∞–º–∏ –≤ —Å–ø–∏—Å–æ–∫
        callback_query.bot.bot_data["log_message_ids"].append(sent_message.message_id)
        await callback_query.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    elif action == "delete_logs":
        log_message_ids = callback_query.bot.bot_data.get("log_message_ids", [])
        if log_message_ids:
            for log_message_id in log_message_ids:
                try:
                    await callback_query.bot.delete_message(callback_query.message.chat.id, log_message_id)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∞–º–∏: {e}")
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            callback_query.bot.bot_data["log_message_ids"].clear()
        await callback_query.message.delete()
        await callback_query.answer("–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∞–º–∏ —É–¥–∞–ª–µ–Ω—ã!")

async def restart_handler(message: types.Message):
        await message.reply("‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
        await message.reply("‚ôªÔ∏è –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        logging.debug(f"‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ—Ç {message.from_user.username}.")
        logging.info(f"‚ôªÔ∏è –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        subprocess.call([sys.executable] + sys.argv)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞

# –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏
def get_reactions_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=6)
    buttons = [InlineKeyboardButton(reaction, callback_data=reaction) for reaction in AVAILABLE_REACTIONS]
    keyboard.add(*buttons)
    return keyboard

async def reactlist(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é:", reply_markup=get_reactions_keyboard())

async def process_callback_reaction(callback_query: types.CallbackQuery):
    selected_reaction = callback_query.data
    message_id = callback_query.message.reply_to_message.message_id  # ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª –±–æ—Ç
    chat_id = callback_query.message.chat.id
    big_reaction = choice([True])

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await client(SendReactionRequest(
            peer=chat_id,
            msg_id=message_id,
            reaction=[ReactionEmoji(emoticon=selected_reaction)],
            big=big_reaction
        ))
        await callback_query.answer(f'–†–µ–∞–∫—Ü–∏—è {selected_reaction} –¥–æ–±–∞–≤–ª–µ–Ω–∞.')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏ {selected_reaction}: {e}")
        await callback_query.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏ {selected_reaction}.')

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register(dp: Dispatcher):
    dp.register_message_handler(restart_handler, lambda message: message.text.strip().lower() in ["/restart", "/reboot", "/reset", "restart", "reboot", "reset", "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", "–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫", "—Ä–µ–±—É—Ç"])
    dp.register_message_handler(console_handler, lambda message: message.text.strip().lower() in ["/console","/–∫–æ–Ω—Å–æ–ª—å", "console", "–∫–æ–Ω—Å–æ–ª—å", "/logs","/–ª–æ–≥–∏", "logs", "–ª–æ–≥–∏"])
    dp.register_callback_query_handler(callback_handler, lambda c: c.data.startswith("logs_") or c.data == "delete_logs")
    dp.register_message_handler(test_handler, commands=["test", "—Ç–µ—Å—Ç", "check", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "—á–µ–∫"])
    dp.register_message_handler(debug_handler, lambda message: message.text and message.text.strip().lower() in ["debug", "–¥–µ–±–∞–≥", "–∏–Ω—Ñ–∞", "–æ—Ç–ª–∞–¥–∫–∞", "test", "—Ç–µ—Å—Ç", "check", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "—á–µ–∫"])
    dp.register_message_handler(ping_handler, lambda message: message.text and message.text.strip().lower() in ["–ø–∏–Ω–≥", "ping"])
    dp.register_message_handler(reactlist, lambda message: message.text and message.text.strip().lower() in ["react", "—Ä–µ–∞–∫—Ç"])
    dp.register_callback_query_handler(process_callback_reaction, lambda c: c.data in AVAILABLE_REACTIONS)
    logging.debug("–ú–æ–¥—É–ª—å test: —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
