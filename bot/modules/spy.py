from brain import types, executor, asyncio, logging, dp, random, logger, bot, Dispatcher

# –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
games = {}

# –°–ª–æ–≤–∞ –¥–ª—è –∏–≥—Ä—ã
words = [
    ("–ü–ª—è–∂", "–ü—É—Å—Ç—ã–Ω—è"),
    ("–ö–∞—Ñ–µ", "–†–µ—Å—Ç–æ—Ä–∞–Ω"),
    ("–ì–æ—Ä—ã", "–õ–µ—Å"),
    ("–°–∞–º–æ–ª—ë—Ç", "–ü–æ–µ–∑–¥"),
    ("–¢–µ–∞—Ç—Ä", "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä"),
    ("–ö–æ—Å–º–æ—Å", "–ó–≤–µ–∑–¥—ã"),
    ("–ü–∏—Ä–∞—Ç", "–ö–æ—Ä–∞–±–ª—å"),
    ("–®–∫–æ–ª–∞", "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"),
    ("–ú–∞—à–∏–Ω–∞", "–ê–≤—Ç–æ–±—É—Å"),
    ("–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç", "–ú–∞–≥–∞–∑–∏–Ω"),
]

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
game_statistics = {}

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
async def start_game(message: types.Message):
    chat_id = message.chat.id
    if chat_id in games:
        await message.reply("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å —Å –∫–æ–º–∞–Ω–¥–æ–π /join.")
        return

    games[chat_id] = {
        "players": [],
        "spy": None,
        "words": random.choice(words),
        "started": False,
        "rounds": 0,
        "spy_wins": 0,
        "citizen_wins": 0,
    }
    await message.reply("üé≠ –ò–≥—Ä–∞ '–®–ø–∏–æ–Ω' –Ω–∞—á–∞–ª–∞—Å—å! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å —Å –∫–æ–º–∞–Ω–¥–æ–π /join.")
    logger.debug(f"Game started in chat {chat_id}")

# –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
async def join_game(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = message.from_user.first_name

    if chat_id not in games:
        await message.reply("–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –ù–∞–ø–∏—à–∏ /startspy, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    if games[chat_id]["started"]:
        await message.reply("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–¥–æ–∂–¥–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞!")
        return

    if user_id in [p["id"] for p in games[chat_id]["players"]]:
        await message.reply("–¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
        return

    games[chat_id]["players"].append({"id": user_id, "name": username})
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    keyboard = types.InlineKeyboardMarkup()
    for player in games[chat_id]["players"]:
        keyboard.add(types.InlineKeyboardButton(player["name"], callback_data=f"player_{player['id']}"))
    
    await message.reply(f"{username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ! –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(games[chat_id]['players'])}.", reply_markup=keyboard)
    logger.debug(f"{username} joined the game in chat {chat_id}")

# –ù–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞
async def start_round(message: types.Message):
    chat_id = message.chat.id
    if chat_id not in games or len(games[chat_id]["players"]) < 3:
        await message.reply("–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 3 –∏–≥—Ä–æ–∫–∞. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å —Å –∫–æ–º–∞–Ω–¥–æ–π /join.")
        return

    if games[chat_id]["started"]:
        await message.reply("–†–∞—É–Ω–¥ —É–∂–µ –Ω–∞—á–∞–ª—Å—è!")
        return

    games[chat_id]["started"] = True

    # –í—ã–±–∏—Ä–∞–µ–º —à–ø–∏–æ–Ω–∞
    players = games[chat_id]["players"]
    spy_index = random.randint(0, len(players) - 1)
    games[chat_id]["spy"] = players[spy_index]["id"]

    # –†–∞–∑–¥–∞—ë–º —Å–ª–æ–≤–∞
    word_for_citizens, word_for_spy = games[chat_id]["words"]
    for player in players:
        word = word_for_spy if player["id"] == games[chat_id]["spy"] else word_for_citizens
        try:
            await bot.send_message(player["id"], f"–¢–≤–æ—ë —Å–ª–æ–≤–æ: {word}")
        except Exception as e:
            logger.error(f"Error sending word to {player['name']}: {e}")
            continue

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    await message.reply(
        "üîç –í—Å–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏ —Å–ª–æ–≤–∞! –ó–∞–¥–∞–≤–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —à–ø–∏–æ–Ω–∞. "
        "–®–ø–∏–æ–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Ç–≤–æ—Ä—è—Ç—å—Å—è, —á—Ç–æ –∑–Ω–∞–µ—Ç —Å–ª–æ–≤–æ. "
        "–ü–æ—Å–ª–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≥–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ —à–ø–∏–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /vote @username."
    )

    # –¢–∞–π–º–µ—Ä –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –º–∏–Ω—É—Ç—ã)
    await asyncio.sleep(120)
    if games[chat_id]["started"]:
        await message.reply("–í—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é.")
        logger.debug(f"Discussion time ended in chat {chat_id}")

# –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
async def vote(message: types.Message):
    chat_id = message.chat.id
    if chat_id not in games or not games[chat_id]["started"]:
        await message.reply("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ /startround, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    try:
        voted_username = message.text.split()[1].replace("@", "")
    except IndexError:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ, –∑–∞ –∫–æ–≥–æ –≥–æ–ª–æ—Å—É–µ—Ç–µ: /vote @username.")
        return

    players = games[chat_id]["players"]
    voted_player = next((p for p in players if p["name"] == voted_username), None)
    if not voted_player:
        await message.reply("–¢–∞–∫–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –≤ –∏–≥—Ä–µ.")
        return

    if "votes" not in games[chat_id]:
        games[chat_id]["votes"] = {}
    games[chat_id]["votes"][voted_player["id"]] = games[chat_id]["votes"].get(voted_player["id"], 0) + 1

    await message.reply(f"–ì–æ–ª–æ—Å –∑–∞—Å—á–∏—Ç–∞–Ω –∑–∞ {voted_username}!")
    logger.debug(f"Vote recorded for {voted_username} in chat {chat_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–µ–Ω–æ –ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    if len(games[chat_id]["votes"]) >= len(players):
        await end_round(chat_id)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
async def end_round(chat_id):
    players = games[chat_id]["players"]
    spy_id = games[chat_id]["spy"]
    votes = games[chat_id]["votes"]

    # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
    most_voted = max(votes, key=votes.get)
    spy_found = most_voted == spy_id

    result = "üéâ –®–ø–∏–æ–Ω –ø–æ–π–º–∞–Ω!" if spy_found else "üòà –®–ø–∏–æ–Ω —Å–±–µ–∂–∞–ª!"
    await bot.send_message(chat_id, f"{result}\n\n–®–ø–∏–æ–Ω–æ–º –±—ã–ª(–∞): {next(p['name'] for p in players if p['id'] == spy_id)}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if spy_found:
        games[chat_id]["citizen_wins"] += 1
    else:
        games[chat_id]["spy_wins"] += 1

    games[chat_id]["rounds"] += 1

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –∏–≥—Ä—ã
    await bot.send_message(chat_id, f"–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤: {games[chat_id]['rounds']}\n"
                                   f"–®–ø–∏–æ–Ω–æ–≤ –ø–æ–π–º–∞–Ω–æ: {games[chat_id]['citizen_wins']}\n"
                                   f"–®–ø–∏–æ–Ω–æ–≤ —Å–±–µ–∂–∞–ª–æ: {games[chat_id]['spy_wins']}")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    games.pop(chat_id)
    logger.debug(f"Game ended and reset in chat {chat_id}")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã
async def show_stats(message: types.Message):
    chat_id = message.chat.id
    if chat_id not in games:
        await message.reply("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return

    stats = games[chat_id]
    await message.reply(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:\n"
                        f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤: {stats['rounds']}\n"
                        f"–®–ø–∏–æ–Ω–æ–≤ –ø–æ–π–º–∞–Ω–æ: {stats['citizen_wins']}\n"
                        f"–®–ø–∏–æ–Ω–æ–≤ —Å–±–µ–∂–∞–ª–æ: {stats['spy_wins']}")
    logger.debug(f"Statistics sent for chat {chat_id}")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register(dp: Dispatcher):
    dp.register_message_handler(start_game, commands=["startspy"])
    dp.register_message_handler(join_game, commands=["join"])
    dp.register_message_handler(start_round, commands=["startround"])
    dp.register_message_handler(vote, commands=["vote"])
    dp.register_message_handler(show_stats, commands=["stats"])
    logging.debug("–ú–æ–¥—É–ª—å spy: —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")