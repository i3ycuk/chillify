from brain import Dispatcher, os, importlib, logging, dp, localization, asyncio, clear_cache_daily, DEBUG, CACHE_CLEANUP_INTERVAL, QApplication, QTextEdit, QMainWindow, QPushButton, QVBoxLayout, QWidget, QLineEdit, QTabWidget, QLabel, TelegramClient, events, sync, SESSION_NAME, API_ID, API_HASH

logging.basicConfig(level=logging.DEBUG if DEBUG else logging.INFO)

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º
class Cache:
    def __init__(self):
        self.cache = {}

    def set(self, key, value):
        self.cache[key] = value

    def get(self, key, default=None):
        return self.cache.get(key, default)

    def delete(self, key):
        self.cache.pop(key, None)

    async def auto_cleanup(self, interval):
        while True:
            await asyncio.sleep(interval)
            self.cache.clear()
            logging.info("Cache cleared.")

cache = Cache()

def register_handlers_from_directory(dp, handlers_dir="handlers"):
    base_dir = os.path.dirname(os.path.abspath(__file__))
    handlers_path = os.path.join(base_dir, handlers_dir)

    if not os.path.exists(handlers_path):
        raise FileNotFoundError(f"–ü–∞–ø–∫–∞ '{handlers_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    init_file = os.path.join(handlers_path, "__init__.py")
    if not os.path.exists(init_file):
        logging.warning(f"–í –ø–∞–ø–∫–µ '{handlers_dir}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª '__init__.py'. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–æ–º.")

    for file_name in os.listdir(handlers_path):
        if file_name.endswith(".py") and file_name != "__init__.py":
            module_name = f"{handlers_dir}.{file_name[:-3]}"
            try:
                module = importlib.import_module(module_name)
                if hasattr(module, "register"):
                    module.register(dp)
                else:
                    logging.warning(f"–ú–æ–¥—É–ª—å {module_name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ register.")
            except ImportError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è {module_name}: {e}")
            except Exception as e:
                logging.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ {module_name}:")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
print("–ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.")
register_handlers_from_directory(dp)
print("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
print("–ù–∞—á–∏–Ω–∞–µ–º polling...")
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telethon
client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

# GUI –∫–ª–∏–µ–Ω—Ç–∞
class TelegramClientGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("Chillify üåø - Telegram Client")
        self.setGeometry(100, 100, 900, 700)

        self.tabs = QTabWidget(self)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logs_tab = QWidget()
        self.text_area = QTextEdit(self.logs_tab)
        self.text_area.setReadOnly(True)
        logs_layout = QVBoxLayout()
        logs_layout.addWidget(self.text_area)
        self.logs_tab.setLayout(logs_layout)
        self.tabs.addTab(self.logs_tab, "–õ–æ–≥–∏")

        # –°–æ–æ–±—â–µ–Ω–∏—è
        self.messages_tab = QWidget()
        self.chat_id_input = QLineEdit(self.messages_tab)
        self.chat_id_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ chat_id")

        self.message_input = QTextEdit(self.messages_tab)
        self.message_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

        self.send_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", self.messages_tab)
        self.send_button.clicked.connect(self.send_message)

        messages_layout = QVBoxLayout()
        messages_layout.addWidget(QLabel("Chat ID:"))
        messages_layout.addWidget(self.chat_id_input)
        messages_layout.addWidget(QLabel("–°–æ–æ–±—â–µ–Ω–∏–µ:"))
        messages_layout.addWidget(self.message_input)
        messages_layout.addWidget(self.send_button)
        self.messages_tab.setLayout(messages_layout)
        self.tabs.addTab(self.messages_tab, "–°–æ–æ–±—â–µ–Ω–∏—è")

        # –ß–∞—Ç—ã
        self.chats_tab = QWidget()
        self.chats_list = QTextEdit(self.chats_tab)
        self.chats_list.setReadOnly(True)
        self.load_chats_button = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã", self.chats_tab)
        self.load_chats_button.clicked.connect(self.load_chats)

        chats_layout = QVBoxLayout()
        chats_layout.addWidget(self.chats_list)
        chats_layout.addWidget(self.load_chats_button)
        self.chats_tab.setLayout(chats_layout)
        self.tabs.addTab(self.chats_tab, "–ß–∞—Ç—ã")

        main_layout = QVBoxLayout()
        main_layout.addWidget(self.tabs)
        container = QWidget()
        container.setLayout(main_layout)
        self.setCentralWidget(container)

    def log(self, message):
        self.text_area.append(message)

    def send_message(self):
        chat_id = self.chat_id_input.text()
        message = self.message_input.toPlainText()

        if not chat_id or not message:
            self.log("Chat ID –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")
            return

        async def send():
            try:
                await client.send_message(chat_id, message)
                self.log(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}: {message}")
            except Exception as e:
                self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        client.loop.create_task(send())

    def load_chats(self):
        async def load():
            try:
                dialogs = await client.get_dialogs()
                self.chats_list.clear()
                for dialog in dialogs:
                    self.chats_list.append(f"{dialog.name or dialog.title}: {dialog.id}")
                self.log("–ß–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            except Exception as e:
                self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤: {e}")

        client.loop.create_task(load())

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞
async def main():
    await client.start()
    logging.info("Telegram Client Started")

    app = QApplication([])
    gui = TelegramClientGUI()
    gui.show()

    app.exec_()

async def on_startup(dispatcher):
    asyncio.create_task(clear_cache_daily())
    logging.info("Cache cleaning task has been started.")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    client.loop.run_until_complete(main())
