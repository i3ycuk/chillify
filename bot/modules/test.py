from brain import types, text, bold, italic, code, pre, log_stream, dominate, style, body, h1, p, datetime, footer, InlineKeyboardMarkup, InlineKeyboardButton, os, logging, subprocess, sys, Dispatcher, random, choice, SendReactionRequest, ReactionEmoji, AVAILABLE_REACTIONS, client, dp, bot, ParseMode, asyncio, TelegramAPIError

async def debug_handler(message: types.Message):
    if not message.text:  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç
        logging.debug("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    debug_info = text(
        "üõ†Ô∏è " + bold("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"),
        f"üìÑ ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}",
        f"üí¨ –¢–µ–∫—Å—Ç: {italic(message.text or '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')}",
        f"üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {message.date}",
        f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {bold(message.from_user.full_name)}",
        f"üÜî ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {message.from_user.id}",
        f"üåê –Ø–∑—ã–∫: {message.from_user.language_code}",
        f"üí¨ –¢–∏–ø —á–∞—Ç–∞: {italic(message.chat.type)}",
        f"üÜî ID —á–∞—Ç–∞: {message.chat.id}",
        "üìú " + code("–ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"),
        pre(str(message.to_python())),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
        sep="\n",
    )

    await message.reply(debug_info, parse_mode="HTML")


async def ping_handler(message: types.Message):
    selected_reaction = random.choice(AVAILABLE_REACTIONS)
    big_reaction = choice([True])  # –°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ–º big —Ä–µ–∞–∫—Ü–∏—é: random.choice([True, False])
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await client(SendReactionRequest(
            peer=message.chat.id,
            msg_id=message.message_id,
            reaction=[ReactionEmoji(selected_reaction)],
            big=big_reaction
        ))
        logging.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
        await message.reply("üèì –ü–æ–Ω–≥!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏ {selected_reaction}: {e}")


async def test_handler(message: types.Message):
    if not message.text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
        return
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {message.text}")
    await message.reply("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def generate_html_logs(filter_level: str = None) -> str:
    # –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º log_stream –≤ –Ω–∞—á–∞–ª–æ, —á—Ç–æ–±—ã —á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    log_stream.seek(0)
    logs = log_stream.getvalue()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
    if not logs.strip():
        logs = "–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã."

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–æ–≤
    if filter_level:
        filtered_logs = "\n".join(
            line for line in logs.splitlines() if f"{filter_level.upper()} -" in line
        )
        if not filtered_logs.strip():  # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
            filtered_logs = f"–õ–æ–≥–∏ —É—Ä–æ–≤–Ω—è {filter_level.upper()} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
    else:
        filtered_logs = logs

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    log_folder = "logs"
    os.makedirs(log_folder, exist_ok=True)

    # –°–æ–∑–¥–∞–Ω–∏–µ HTML-–¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é dominate
    doc = dominate.document(title="–õ–æ–≥–∏ –±–æ—Ç–∞")

    with doc.head:
        style(""" 
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
                line-height: 1.6;
                margin: 20px;
            }
            h1 {
                color: #4CAF50;
            }
            pre {
                background: #f4f4f4;
                border: 1px solid #ddd;
                padding: 10px;
                overflow-x: auto;
            }
            footer {
                margin-top: 20px;
                font-size: 0.9em;
                color: #555;
            }
        """)

    with doc:
        with body():
            h1("üìÑ –õ–æ–≥–∏ –±–æ—Ç–∞")
            p(f"–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            pre(filtered_logs)  # –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏
            footer("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–æ—Ç–æ–º.")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML-–¥–æ–∫—É–º–µ–Ω—Ç–∞
    file_path = os.path.join(log_folder, "logs.html")
    with open(file_path, "w", encoding="utf-8") as f:
        f.write(doc.render())

    return file_path

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–æ–≤
def get_logs_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚öôÔ∏è –í—Å–µ –ª–æ–≥–∏", callback_data="logs_all"),
        InlineKeyboardButton("‚ÑπÔ∏è INFO", callback_data="logs_info"),
        InlineKeyboardButton("‚ö†Ô∏è WARNING", callback_data="logs_warning"),
        InlineKeyboardButton("‚ùå ERROR", callback_data="logs_error"),
    )
    keyboard.add(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="delete_logs"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤
async def console_handler(message: types.Message):
    await message.reply(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:",
        reply_markup=get_logs_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
async def callback_handler(callback_query: types.CallbackQuery):
    action = callback_query.data

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º bot_data –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ª–æ–≥–∞–º–∏
    if not hasattr(callback_query.bot, "bot_data"):
        callback_query.bot.bot_data = {}
    if "log_message_ids" not in callback_query.bot.bot_data:
        callback_query.bot.bot_data["log_message_ids"] = []

    if action.startswith("logs_"):
        filter_level = action.split("_")[1] if action != "logs_all" else None
        file_path = await generate_html_logs(filter_level)

        sent_message = await callback_query.message.answer_document(
            open(file_path, "rb"),
            caption=f"üìÅ –õ–æ–≥–∏ —É—Ä–æ–≤–Ω—è: {filter_level.upper() if filter_level else '–í—Å–µ'}",
        )
        os.remove(file_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

        # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∞–º–∏ –≤ —Å–ø–∏—Å–æ–∫
        callback_query.bot.bot_data["log_message_ids"].append(sent_message.message_id)
        await callback_query.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    elif action == "delete_logs":
        log_message_ids = callback_query.bot.bot_data.get("log_message_ids", [])
        if log_message_ids:
            for log_message_id in log_message_ids:
                try:
                    await callback_query.bot.delete_message(callback_query.message.chat.id, log_message_id)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∞–º–∏: {e}")
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            callback_query.bot.bot_data["log_message_ids"].clear()
        await callback_query.message.delete()
        await callback_query.answer("–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–≥–∞–º–∏ —É–¥–∞–ª–µ–Ω—ã!")

async def restart_handler(message: types.Message):
        await message.reply("‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
        await message.reply("‚ôªÔ∏è –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        logging.debug(f"‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ—Ç {message.from_user.username}.")
        logging.info(f"‚ôªÔ∏è –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        subprocess.call([sys.executable] + sys.argv)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞

# –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏
def get_reactions_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=6)
    buttons = [InlineKeyboardButton(reaction, callback_data=reaction) for reaction in AVAILABLE_REACTIONS]
    keyboard.add(*buttons)
    return keyboard

async def reactlist(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é:", reply_markup=get_reactions_keyboard())

async def process_callback_reaction(callback_query: types.CallbackQuery):
    selected_reaction = callback_query.data
    message_id = callback_query.message.reply_to_message.message_id  # ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª –±–æ—Ç
    chat_id = callback_query.message.chat.id
    big_reaction = choice([True])

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await client(SendReactionRequest(
            peer=chat_id,
            msg_id=message_id,
            reaction=[ReactionEmoji(emoticon=selected_reaction)],
            big=big_reaction
        ))
        await callback_query.answer(f'–†–µ–∞–∫—Ü–∏—è {selected_reaction} –¥–æ–±–∞–≤–ª–µ–Ω–∞.')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏ {selected_reaction}: {e}")
        await callback_query.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏ {selected_reaction}.')


# –°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–∞—Ü–∏–π
ANIMATIONS = [
    ["üåå –í –¥–∞–ª—ë–∫–æ–π-–¥–∞–ª—ë–∫–æ–π –≥–∞–ª–∞–∫—Ç–∏–∫–µ...", "üöÄ –û–¥–∏–Ω–æ–∫–∏–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ...", "ü™ê –ü—Ä–æ–ª–µ—Ç–∞—è –º–∏–º–æ –ø–ª–∞–Ω–µ—Ç –∏ –∑–≤—ë–∑–¥...", "üåü –û–Ω –Ω–∞—Ç–∫–Ω—É–ª—Å—è –Ω–∞ —Å–∏—è—é—â—É—é –∑–≤–µ–∑–¥—É...", "üå† –ó–≤–µ–∑–¥–∞ –æ—Ç–∫—Ä—ã–ª–∞ –ø–æ—Ä—Ç–∞–ª –≤ –¥—Ä—É–≥–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ...", "üöÄ –ö–æ—Ä–∞–±–ª—å, –Ω–µ —Ä–∞–∑–¥—É–º—ã–≤–∞—è, –≤–æ—à—ë–ª –≤ –ø–æ—Ä—Ç–∞–ª...", "‚ú® –í –Ω–æ–≤–æ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏ –≤—Å—ë –±—ã–ª–æ –∏–Ω–∞—á–µ...", "üåà –¶–≤–µ—Ç–∞ –±—ã–ª–∏ —è—Ä—á–µ, –∑–≤—ë–∑–¥—ã —Å–∏—è–ª–∏ —Å–∏–ª—å–Ω–µ–µ...", "üëΩ –ò –≤–¥—Ä—É–≥... –ü–æ—è–≤–∏–ª–∏—Å—å –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ!", "ü§ù –û–Ω–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞...", "üõ∏ –ò –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –µ–º—É –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∏—Ö –º–∏—Ä...", "üåç –¢–∞–∫ –Ω–∞—á–∞–ª–æ—Å—å –≤–µ–ª–∏–∫–æ–µ –º–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ..."],
    ["üê± –ö–æ—Ç–∏–∫ –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏ –ø–æ—Ç—è–Ω—É–ª—Å—è...", "üêæ –û–Ω –≤—ã—à–µ–ª –Ω–∞ —É–ª–∏—Ü—É –∏ –ø–æ—à—ë–ª –≥—É–ª—è—Ç—å...", "üå≥ –í—Å—Ç—Ä–µ—Ç–∏–ª –¥—Ä—É–∑–µ–π —É –±–æ–ª—å—à–æ–≥–æ –¥–µ—Ä–µ–≤–∞...", "üê¶ –ü—Ç–∏—Ü—ã –Ω–∞—á–∞–ª–∏ –ø–µ—Ç—å –ø–µ—Å–Ω—é...", "üåû –°–æ–ª–Ω—Ü–µ —Å–≤–µ—Ç–∏–ª–æ —è—Ä–∫–æ –∏ —Ç–µ–ø–ª–æ...", "üåª –¶–≤–µ—Ç—ã —Ä–∞—Å—Ü–≤–µ–ª–∏ –≤–æ–∫—Ä—É–≥...", "üåà –†–∞–¥—É–≥–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –Ω–∞ –Ω–µ–±–µ...", "üêæ –ö–æ—Ç–∏–∫ –ø—Ä—ã–≥–∞–ª –∏ –∏–≥—Ä–∞–ª —Å—Ä–µ–¥–∏ —Ü–≤–µ—Ç–æ–≤...", "üçÉ –í–µ—Ç–µ—Ä–æ–∫ –ø—Ä–∏–Ω–µ—Å –∑–∞–ø–∞—Ö —Å–≤–µ–∂–µ–π —Ç—Ä–∞–≤—ã...", "üåå –ò –¥–µ–Ω—å –ø–ª–∞–≤–Ω–æ –ø–µ—Ä–µ—à—ë–ª –≤ –Ω–æ—á—å...", "üåô –ö–æ—Ç–∏–∫ –≤–µ—Ä–Ω—É–ª—Å—è –¥–æ–º–æ–π –∏ –ª—ë–≥ —Å–ø–∞—Ç—å...", "üò¥ –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –∫–æ—Ç–∏–∫..."],
    ["üåßÔ∏è –ù–∞—á–∞–ª—Å—è –¥–æ–∂–¥—å...", "‚òî –õ—é–¥–∏ —Ä–∞—Å–∫—Ä—ã–ª–∏ –∑–æ–Ω—Ç—ã...", "üíß –ö–∞–ø–ª–∏ –¥–æ–∂–¥—è —Å—Ç–µ–∫–∞–ª–∏ –ø–æ —Å—Ç–µ–∫–ª—É...", "üåà –í–¥—Ä—É–≥ –ø–æ—è–≤–∏–ª–∞—Å—å —Ä–∞–¥—É–≥–∞...", "üå¶Ô∏è –î–æ–∂–¥—å –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª—Å—è, –∏ –≤—ã–≥–ª—è–Ω—É–ª–æ —Å–æ–ª–Ω—Ü–µ...", "üå§Ô∏è –ü–æ–≥–æ–¥–∞ —Å–Ω–æ–≤–∞ —Å—Ç–∞–ª–∞ —è—Å–Ω–æ–π...", "üåø –¢—Ä–∞–≤–∞ –∏ –¥–µ—Ä–µ–≤—å—è –∑–∞—Å–∏—è–ª–∏ –æ—Ç –≤–ª–∞–≥–∏...", "üçÉ –í–µ—Ç–µ—Ä–æ–∫ —Ä–∞–∑–Ω–æ—Å–∏–ª –∞—Ä–æ–º–∞—Ç—ã —Ü–≤–µ—Ç–æ–≤...", "ü¶ã –ë–∞–±–æ—á–∫–∏ –ø–æ—Ä—Ö–∞–ª–∏ –Ω–∞–¥ —Ü–≤–µ—Ç–∞–º–∏...", "üåª –í—Å—ë –≤–æ–∫—Ä—É–≥ –æ–∂–∏–ª–æ –∏ –∑–∞–∏–≥—Ä–∞–ª–æ –∫—Ä–∞—Å–∫–∞–º–∏...", "üåû –°–æ–ª–Ω–µ—á–Ω—ã–µ –ª—É—á–∏ —Å–æ–≥—Ä–µ–≤–∞–ª–∏ –∑–µ–º–ª—é...", "üåå –ò –¥–µ–Ω—å —Å–º–µ–Ω–∏–ª—Å—è –Ω–æ—á—å—é, –ø–æ–ª–Ω–æ–π –∑–≤—ë–∑–¥..."],
    ["üë®‚ÄçüöÄ –ö–æ—Å–º–æ–Ω–∞–≤—Ç –≥–æ—Ç–æ–≤–∏–ª—Å—è –∫ –≤–∑–ª—ë—Ç—É...", "üöÄ –†–∞–∫–µ—Ç–∞ –≤–∑–ª–µ—Ç–µ–ª–∞ –≤ –Ω–µ–±–æ...", "üåç –ó–µ–º–ª—è –æ—Å—Ç–∞–ª–∞—Å—å –ø–æ–∑–∞–¥–∏...", "ü™ê –ü–æ–ª—ë—Ç —á–µ—Ä–µ–∑ –°–æ–ª–Ω–µ—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É...", "üåü –ú–∏–ª–ª–∏–æ–Ω—ã –∑–≤—ë–∑–¥ –≤–æ–∫—Ä—É–≥...", "üåå –ì–∞–ª–∞–∫—Ç–∏–∫–∏ —Ç—è–Ω—É–ª–∏—Å—å –≤–¥–∞–ª—å...", "üëΩ –í—Å—Ç—Ä–µ—á–∞ —Å –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤–∞–º–∏...", "ü§ù –î—Ä—É–∂–µ—Å–∫–æ–µ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ...", "üõ∏ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç–Ω–æ–º –∫–æ—Ä–∞–±–ª–µ...", "üåç –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ —Ä–æ–¥–Ω—É—é –ø–ª–∞–Ω–µ—Ç—É...", "üè° –ö–æ—Å–º–æ–Ω–∞–≤—Ç –≤–µ—Ä–Ω—É–ª—Å—è –¥–æ–º–æ–π...", "üåå –ò —Ä–∞—Å—Å–∫–∞–∑–∞–ª –æ —Å–≤–æ–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö..."],
    ["üåÖ –†–∞—Å—Å–≤–µ—Ç –Ω–∞–¥ –º–æ—Ä–µ–º...", "üåä –í–æ–ª–Ω—ã –±—å—é—Ç—Å—è –æ –±–µ—Ä–µ–≥...", "üêö –†–∞–∫—É—à–∫–∏ —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã –ø–æ –ø–µ—Å–∫—É...", "ü¶Ä –ö—Ä–∞–±–∏–∫–∏ –±–µ–≥–∞—é—Ç –ø–æ –ø–ª—è–∂—É...", "üå¥ –ü–∞–ª—å–º—ã –∫–∞—á–∞—é—Ç—Å—è –Ω–∞ –≤–µ—Ç—Ä—É...", "üåû –°–æ–ª–Ω—Ü–µ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –≤—ã—à–µ...", "ü¶ú –ü—Ç–∏—Ü—ã –ø–æ—é—Ç —Å–≤–æ—é —É—Ç—Ä–µ–Ω–Ω—é—é –ø–µ—Å–Ω—é...", "üèñÔ∏è –õ—é–¥–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ –ø–ª—è–∂...", "üö§ –ö–∞—Ç–µ—Ä–∞ –±–æ—Ä–æ–∑–¥—è—Ç –≤–æ–ª–Ω—ã...", "üèÑ‚Äç‚ôÇÔ∏è –°–µ—Ä—Ñ–µ—Ä—ã –ª–æ–≤—è—Ç –≤–æ–ª–Ω—É...", "üåÖ –î–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É...", "üåå –ò –Ω–æ—á—å —Å–º–µ–Ω—è–µ—Ç –¥–µ–Ω—å..."],
    ["üå≥ –í –ª–µ—Å—É –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –∂–∏–∑–Ω—å...", "üåû –°–æ–ª–Ω—Ü–µ –ø—Ä–æ–±–∏–≤–∞–µ—Ç—Å—è —Å–∫–≤–æ–∑—å –ª–∏—Å—Ç–≤—É...", "üê¶ –ü—Ç–∏—Ü—ã —â–µ–±–µ—á—É—Ç –Ω–∞ –≤–µ—Ç–≤—è—Ö...", "ü¶ã –ë–∞–±–æ—á–∫–∏ –ø–æ—Ä—Ö–∞—é—Ç...", "üêøÔ∏è –ë–µ–ª–∫–∏ –∏–≥—Ä–∞—é—Ç –Ω–∞ –¥–µ—Ä–µ–≤—å—è—Ö...", "üçÑ –ì—Ä–∏–±—ã —Ä–∞—Å—Ç—É—Ç –ø–æ–¥ –¥–µ—Ä–µ–≤—å—è–º–∏...", "üå∏ –¶–≤–µ—Ç—ã —Ü–≤–µ—Ç—É—Ç –ø–æ –≤—Å–µ–º—É –ª–µ—Å—É...", "üçÉ –õ—ë–≥–∫–∏–π –≤–µ—Ç–µ—Ä–æ–∫ —à–µ–ª–µ—Å—Ç–∏—Ç –ª–∏—Å—Ç—å—è–º–∏...", "ü¶â –°–æ–≤–∞ –Ω–∞–±–ª—é–¥–∞–µ—Ç —Å –≤—ã—Å–æ—Ç—ã...", "üåå –õ–µ—Å —É—Ö–æ–¥–∏—Ç –≤ –Ω–æ—á—å...", "üåô –õ—É–Ω–∞ –æ—Å–≤–µ—â–∞–µ—Ç –≤—Å—ë –≤–æ–∫—Ä—É–≥...", "ü¶ä –õ–µ—Å–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è –∫–æ —Å–Ω—É..."]
]

async def send_random_animation(chat_id: int, delay: float = 2.0):
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
    animation_frames = random.choice(ANIMATIONS)
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = await bot.send_message(chat_id, animation_frames[0], parse_mode=ParseMode.MARKDOWN)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        for frame in animation_frames[1:]:
            await asyncio.sleep(delay)
            try:
                await sent_message.edit_text(frame, parse_mode=ParseMode.MARKDOWN)
            except TelegramAPIError as e:
                logging.error(f"Telegram API Error during animation: {e}")
                break
    except TelegramAPIError as e:
        logging.error(f"Telegram API Error (Send): {e}")


async def random_animation_command_handler(message: types.Message):
    await send_random_animation(message.chat.id)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register(dp: Dispatcher):
    dp.register_message_handler(restart_handler, lambda message: message.text.strip().lower() in ["/restart", "/reboot", "/reset", "restart", "reboot", "reset", "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", "–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫", "—Ä–µ–±—É—Ç"])
    dp.register_message_handler(console_handler, lambda message: message.text.strip().lower() in ["/console","/–∫–æ–Ω—Å–æ–ª—å", "console", "–∫–æ–Ω—Å–æ–ª—å", "/logs","/–ª–æ–≥–∏", "logs", "–ª–æ–≥–∏"])
    dp.register_callback_query_handler(callback_handler, lambda c: c.data.startswith("logs_") or c.data == "delete_logs")
    dp.register_message_handler(test_handler, commands=["test", "—Ç–µ—Å—Ç", "check", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "—á–µ–∫"])
    dp.register_message_handler(debug_handler, lambda message: message.text and message.text.strip().lower() in ["debug", "–¥–µ–±–∞–≥", "–∏–Ω—Ñ–∞", "–æ—Ç–ª–∞–¥–∫–∞", "test", "—Ç–µ—Å—Ç", "check", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "—á–µ–∫"])
    dp.register_message_handler(ping_handler, lambda message: message.text and message.text.strip().lower() in ["–ø–∏–Ω–≥", "ping"])
    dp.register_message_handler(reactlist, lambda message: message.text and message.text.strip().lower() in ["react", "—Ä–µ–∞–∫—Ç"])
    dp.register_callback_query_handler(process_callback_reaction, lambda c: c.data in AVAILABLE_REACTIONS)
    dp.register_message_handler(random_animation_command_handler, lambda message: message.text and message.text.strip().lower() in ["anim", "–∞–Ω–∏–º"])
    logging.debug("–ú–æ–¥—É–ª—å test: —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
