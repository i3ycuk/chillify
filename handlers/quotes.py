from brain import dp, types, ParseMode, openai, Dispatcher

async def send_quote(message: types.Message):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {message.text}")
    quote = get_random_quote()
    await message.reply(quote, parse_mode=ParseMode.MARKDOWN)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ OpenAI
def get_random_quote():
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",  # –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Ü–∏—Ç–∞—Ç—ã."},
                {"role": "user", "content": "–ù–∞–ø–∏—à–∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É."}
            ],
            max_tokens=60,
            temperature=0.7
            
           )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}")
        return "–ñ–∏–∑–Ω—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–º –º–æ–º–µ–Ω—Ç–æ–º. üåø"

def register(dp: Dispatcher):
    dp.register_message_handler(send_quote, commands=["quotes"])
    print("quotes —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")